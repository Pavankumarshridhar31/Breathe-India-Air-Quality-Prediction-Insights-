# -*- coding: utf-8 -*-
"""air-quality-prediction-model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VOz43VP2ewb55N2jGHM-b8dyKP-74w2y

# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#7E8083   ; overflow:hidden"><b>XML to CSV Conversion</b></div>
"""

import xml.etree.ElementTree as ET
import csv

xml_file_path = '/kaggle/input/india-air-quality-index2024-dataset/data_aqi_cpcb.xml'
csv_file_path = 'IndiaAQIcsv'

tree = ET.parse(xml_file_path)
root = tree.getroot()


with open(csv_file_path, 'w', newline='', encoding='utf-8') as csvfile:
    writer = csv.writer(csvfile)

    header = [
        "Country", "State", "City", "Station", "Latitude", "Longitude", "Last Update",
        "Pollutant", "Min", "Max", "Avg", "AQI", "Predominant Parameter"
    ]
    writer.writerow(header)


    for country in root.findall('Country'):
        country_id = country.get('id')
        for state in country.findall('State'):
            state_id = state.get('id')
            for city in state.findall('City'):
                city_id = city.get('id')
                for station in city.findall('Station'):
                    station_id = station.get('id')
                    latitude = station.get('latitude')
                    longitude = station.get('longitude')
                    last_update = station.get('lastupdate')


                    for pollutant in station.findall('Pollutant_Index'):
                        pollutant_id = pollutant.get('id')
                        min_val = pollutant.get('Min')
                        max_val = pollutant.get('Max')
                        avg_val = pollutant.get('Avg')


                        aqi_value = ""
                        predominant_param = ""


                        aqi = station.find('Air_Quality_Index')
                        if aqi is not None:
                            aqi_value = aqi.get('Value')
                            predominant_param = aqi.get('Predominant_Parameter')


                        writer.writerow([
                            country_id, state_id, city_id, station_id, latitude, longitude,
                            last_update, pollutant_id, min_val, max_val, avg_val,
                            aqi_value, predominant_param
                        ])

print("XML data has been successfully converted to CSV!")

"""# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#7E8083   ; overflow:hidden"><b>Import libraries and load data</b></div>"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")
df=pd.read_csv("/kaggle/working/IndiaAQIcsv")
print(df.head())
print(df.isnull().sum())
print(df.info())

df['Min'].fillna(df['Min'].mean(), inplace=True)
df['Max'].fillna(df['Max'].mean(), inplace=True)
df['Avg'].fillna(df['Avg'].mean(), inplace=True)
df['AQI'].fillna(df['AQI'].mean(), inplace=True)
df['Predominant Parameter'].fillna('Unknown', inplace=True)

print(df.isnull().sum())

"""# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#7E8083   ; overflow:hidden"><b>EDA</b></div>"""

print(df.describe())
print(df['Country'].value_counts())
print(df['State'].value_counts())
print(df['City'].value_counts())
print(df['Pollutant'].value_counts())

plt.figure(figsize=(10, 6))
sns.histplot(df['AQI'], bins=30, kde=True,color='grey')
plt.title('Distribution of AQI values')
plt.xlabel('AQI')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(14, 8))
sns.boxplot(x='State', y='AQI', data=df)
plt.title('Box Plot of AQI by State')
plt.xlabel('State')
plt.ylabel('AQI')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(50, 16))
sns.boxplot(x='City', y='AQI', data=df)
plt.title('Box Plot of AQI by City')
plt.xlabel('City')
plt.ylabel('AQI')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Min', y='Max', hue='Pollutant', data=df)
plt.title('Scatter Plot of Min vs. Max Pollutant Levels')
plt.xlabel('Min Pollutant Levels')
plt.ylabel('Max Pollutant Levels')
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['Longitude'], df['Latitude'], c=df['AQI'], cmap='viridis', alpha=0.6)
plt.colorbar(label='AQI')
plt.title('Geographical distribution of monitoring stations')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.show()

plt.figure(figsize=(14, 7))
sns.lineplot(x='Last Update', y='Max', hue='Pollutant', data=df)
plt.title('Max Pollutant Levels Over Time')
plt.xlabel('Date')
plt.ylabel('Max Pollutant Levels')
plt.show()

plt.figure(figsize=(10, 8))
correlation = df[['Min', 'Max', 'Avg', 'AQI']].corr()
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Between Pollutant Levels')
plt.show()

plt.figure(figsize=(14, 7))
state_aqi = df.groupby('State')['AQI'].mean().sort_values(ascending=False)
state_aqi.plot(kind='bar', color='grey')
plt.xlabel('State')
plt.ylabel('Average AQI')
plt.show()

plt.figure(figsize=(50,20))
city_aqi = df.groupby('City')['AQI'].mean().sort_values(ascending=False)
city_aqi.plot(kind='bar',color='grey')
plt.title('Average AQI by City')
plt.xlabel('City')
plt.ylabel('Average AQI')
plt.show()

predominant_pollutants = df.groupby(['State', 'Predominant Parameter']).size().unstack().fillna(0)
predominant_pollutants.plot(kind='bar', stacked=True, figsize=(14, 7))
plt.title('Predominant Pollutants in Different States')
plt.xlabel('State')
plt.ylabel('Count')
plt.legend(title='Pollutant')
plt.show()

predominant_pollutants = df['Predominant Parameter'].value_counts()
plt.figure(figsize=(10, 6))
predominant_pollutants.plot(kind='pie', autopct='%1.1f%%')
plt.title('Predominant Pollutant Distribution')
plt.ylabel('')
plt.show()

plt.figure(figsize=(14, 7))
sns.lineplot(x='Last Update', y='AQI', hue='State', data=df)
plt.title('AQI Trends by State')
plt.xlabel('Date')
plt.ylabel('AQI')
plt.show()

plt.figure(figsize=(14, 7))
dark_palette = sns.color_palette("dark", n_colors=len(df['City'].unique()))
sns.lineplot(x='Last Update', y='AQI', hue='City', data=df, palette=dark_palette)
plt.title('AQI Trends by City')
plt.xlabel('Date')
plt.ylabel('AQI')
plt.show()

plt.figure(figsize=(10, 6))
sns.kdeplot(df['AQI'], shade=True,color='grey')
plt.title('Density Plot of AQI Values')
plt.xlabel('AQI')
plt.ylabel('Density')
plt.show()

sns.pairplot(df[['Min', 'Max', 'Avg', 'AQI']], palette='grey')
plt.title('Pair Plot of Pollutant Levels')
plt.show

plt.figure(figsize=(10, 6))
sns.violinplot(x='Pollutant', y='AQI', data=df)
plt.title('Violin Plot of AQI by Pollutant')
plt.xlabel('Pollutant')
plt.ylabel('AQI')
plt.show()

g = sns.FacetGrid(df, col='State', col_wrap=4, height=4)
g.map(sns.histplot, 'AQI', color='grey')  # Set the color to grey
plt.show()

plt.figure(figsize=(14, 8))
sns.swarmplot(x='State', y='AQI', data=df, color='grey')
plt.title('Swarm Plot of AQI by State')
plt.xlabel('State')
plt.ylabel('AQI')
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(10, 6))
sns.regplot(x='Min', y='AQI', data=df,color='grey')
plt.title('Regplot of AQI vs. Min Pollutant Levels')
plt.xlabel('Min Pollutant Levels')
plt.ylabel('AQI')
plt.show()

"""# <div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#7E8083   ; overflow:hidden"><b>Model</b></div>"""

categorical_columns = df.select_dtypes(include=['object']).columns
df_encoded = pd.get_dummies(df, columns=categorical_columns, drop_first=True)
numeric_columns = df_encoded.select_dtypes(include=['float64', 'int64']).columns
X = df_encoded.drop(columns=['AQI'])
y = df_encoded['AQI']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R^2 Score: {r2}')

y_pred = model.predict(X_test)
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='grey', alpha=0.6)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', lw=2)  # Line for perfect prediction
plt.title('Predicted vs Actual Values')
plt.xlabel('Actual AQI')
plt.ylabel('Predicted AQI')
plt.show()

residuals = y_test - y_pred
plt.figure(figsize=(10, 6))
sns.residplot(x=y_pred, y=residuals, lowess=True, color="grey", line_kws={"color": "red", "lw": 2})
plt.title('Residuals Plot')
plt.xlabel('Predicted AQI')
plt.ylabel('Residuals')
plt.show()

"""<div style="text-align:center; padding:15px; color:white; margin:0; font-size:150%; font-family:'Times New Roman'; background-color:#7E8083 ; overflow:hidden">
  <b></b><br>
  If you found this notebook helpful, please consider upvoting it! Thank you!
</div>
"""